#!/bin/bash

# Script de d√©ploiement Docker pour le projet PSG
# Utilisation: ./docker-deploy.sh

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# V√©rification des pr√©requis
check_docker() {
    log "V√©rification de Docker..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©. Installez Docker Desktop depuis https://www.docker.com/products/docker-desktop"
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas install√©."
    fi
    
    if ! docker info &> /dev/null; then
        error "Docker n'est pas d√©marr√©. Lancez Docker Desktop."
    fi
    
    log "Docker est pr√™t ‚úì"
}

# Configuration de l'environnement
setup_environment() {
    log "Configuration de l'environnement..."
    
    if [ ! -f .env ]; then
        cp .env.docker .env
        warning "Fichier .env cr√©√© √† partir de .env.docker"
        warning "Veuillez modifier les mots de passe dans .env avant de continuer"
        read -p "Appuyez sur Entr√©e pour continuer apr√®s avoir modifi√© .env..."
    fi
    
    log "Environnement configur√© ‚úì"
}

# Build et d√©marrage des conteneurs
start_containers() {
    log "Construction et d√©marrage des conteneurs..."
    
    # Arr√™ter les conteneurs existants si ils existent
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    
    # Construire et d√©marrer
    docker-compose -f docker-compose.prod.yml up --build -d
    
    log "Conteneurs d√©marr√©s ‚úì"
}

# Attendre que la base de donn√©es soit pr√™te
wait_for_database() {
    log "Attente de la base de donn√©es..."
    
    # Attendre que PostgreSQL soit pr√™t
    timeout=60
    while ! docker-compose -f docker-compose.prod.yml exec -T database pg_isready -U app -d psg_app &>/dev/null; do
        timeout=$((timeout - 1))
        if [ $timeout -eq 0 ]; then
            error "Timeout: La base de donn√©es n'est pas pr√™te"
        fi
        echo -n "."
        sleep 1
    done
    
    log "Base de donn√©es pr√™te ‚úì"
}

# Ex√©cuter les migrations
run_migrations() {
    log "Ex√©cution des migrations..."
    
    # Attendre que le backend soit pr√™t
    sleep 10
    
    # Ex√©cuter les migrations
    docker-compose -f docker-compose.prod.yml exec backend php bin/console doctrine:migrations:migrate --no-interaction
    
    log "Migrations ex√©cut√©es ‚úì"
}

# V√©rification du d√©ploiement
verify_deployment() {
    log "V√©rification du d√©ploiement..."
    
    # V√©rifier que tous les conteneurs sont en cours d'ex√©cution
    if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
        error "Certains conteneurs ne sont pas d√©marr√©s"
    fi
    
    # Tester l'API
    sleep 5
    if curl -f http://localhost:8000/api >/dev/null 2>&1; then
        log "API accessible ‚úì"
    else
        warning "API non accessible √† http://localhost:8000/api"
    fi
    
    # Tester le frontend
    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        log "Frontend accessible ‚úì"
    else
        warning "Frontend non accessible √† http://localhost:3000"
    fi
    
    log "V√©rification termin√©e ‚úì"
}

# Affichage des informations finales
show_info() {
    info "üéâ D√©ploiement Docker termin√© avec succ√®s!"
    echo ""
    info "üìä Services disponibles:"
    info "  ‚Ä¢ Frontend (Vue.js): http://localhost:3000"
    info "  ‚Ä¢ Backend (Symfony): http://localhost:8000"
    info "  ‚Ä¢ API: http://localhost:8000/api"
    info "  ‚Ä¢ Base de donn√©es: localhost:5432"
    echo ""
    info "üîß Commandes utiles:"
    info "  ‚Ä¢ Voir les logs: docker-compose -f docker-compose.prod.yml logs -f"
    info "  ‚Ä¢ Arr√™ter: docker-compose -f docker-compose.prod.yml down"
    info "  ‚Ä¢ Red√©marrer: docker-compose -f docker-compose.prod.yml restart"
    info "  ‚Ä¢ Shell backend: docker-compose -f docker-compose.prod.yml exec backend bash"
    echo ""
    warning "üí° N'oubliez pas de:"
    warning "  ‚Ä¢ Modifier les mots de passe dans .env"
    warning "  ‚Ä¢ Configurer votre domaine pour la production"
    warning "  ‚Ä¢ Mettre en place des sauvegardes"
}

# Affichage des logs en temps r√©el
show_logs() {
    log "Affichage des logs (Ctrl+C pour arr√™ter)..."
    docker-compose -f docker-compose.prod.yml logs -f
}

# Menu principal
main() {
    echo "=========================================="
    echo "üê≥ D√©ploiement Docker - Projet PSG"
    echo "=========================================="
    
    echo "Choisissez une option:"
    echo "1) D√©ploiement complet (recommand√©)"
    echo "2) D√©marrer les services existants"
    echo "3) Arr√™ter les services"
    echo "4) Voir les logs"
    echo "5) Reconstruire les images"
    echo "6) Nettoyer (supprimer tous les conteneurs et volumes)"
    echo "7) Quitter"
    
    read -p "Votre choix [1-7]: " choice
    
    case $choice in
        1)
            check_docker
            setup_environment
            start_containers
            wait_for_database
            run_migrations
            verify_deployment
            show_info
            read -p "Voulez-vous voir les logs en temps r√©el? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                show_logs
            fi
            ;;
        2)
            check_docker
            docker-compose -f docker-compose.prod.yml up -d
            log "Services d√©marr√©s ‚úì"
            ;;
        3)
            docker-compose -f docker-compose.prod.yml down
            log "Services arr√™t√©s ‚úì"
            ;;
        4)
            show_logs
            ;;
        5)
            check_docker
            docker-compose -f docker-compose.prod.yml build --no-cache
            docker-compose -f docker-compose.prod.yml up -d
            log "Images reconstruites et services red√©marr√©s ‚úì"
            ;;
        6)
            warning "Cette action va supprimer tous les conteneurs et volumes (donn√©es perdues!)"
            read -p "√ätes-vous s√ªr? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker-compose -f docker-compose.prod.yml down -v
                docker system prune -f
                log "Nettoyage termin√© ‚úì"
            fi
            ;;
        7)
            exit 0
            ;;
        *)
            error "Option invalide"
            ;;
    esac
}

# Gestion des signaux
trap 'echo -e "\n${YELLOW}Arr√™t du script...${NC}"; exit 0' INT TERM

# Ex√©cution du script principal
main
