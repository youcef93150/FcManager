# üîç TEST API RAILWAY - DIAGNOSTIC COMPLET

Write-Host "üöÄ DIAGNOSTIC COMPLET DE L'API RAILWAY PSG" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Cyan

$API_BASE = "https://fcmanager-production.up.railway.app"

Write-Host "üåê URL de base : $API_BASE" -ForegroundColor Yellow

# Test 1: API racine
Write-Host "`n1Ô∏è‚É£ Test de l'API racine..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api" -Method GET -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ API racine accessible - Status: $($response.StatusCode)" -ForegroundColor Green
    Write-Host "Response: $($response.Content)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå API racine inaccessible: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 2: Actualit√©s
Write-Host "`n2Ô∏è‚É£ Test des actualit√©s..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/actualites" -Method GET -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ Actualit√©s accessibles - Status: $($response.StatusCode)" -ForegroundColor Green
    $content = $response.Content | ConvertFrom-Json
    Write-Host "üì∞ Nombre d'actualit√©s trouv√©es: $($content.Count)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Actualit√©s inaccessibles: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: Joueurs
Write-Host "`n3Ô∏è‚É£ Test des joueurs..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/joueurs" -Method GET -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ Joueurs accessibles - Status: $($response.StatusCode)" -ForegroundColor Green
    $content = $response.Content | ConvertFrom-Json
    Write-Host "‚öΩ Nombre de joueurs trouv√©s: $($content.Count)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Joueurs inaccessibles: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: Produits
Write-Host "`n4Ô∏è‚É£ Test des produits..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/products" -Method GET -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ Produits accessibles - Status: $($response.StatusCode)" -ForegroundColor Green
    $content = $response.Content | ConvertFrom-Json
    Write-Host "üõçÔ∏è Nombre de produits trouv√©s: $($content.Count)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Produits inaccessibles: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: Test de connexion simple
Write-Host "`n5Ô∏è‚É£ Test de connexion HTTP simple..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri $API_BASE -Method GET -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ Serveur accessible - Status: $($response.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serveur inaccessible: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n================================================" -ForegroundColor Cyan
Write-Host "üéØ R√âSUM√â DU DIAGNOSTIC" -ForegroundColor Green

# V√©rification Railway CLI
Write-Host "`n6Ô∏è‚É£ V√©rification Railway CLI..." -ForegroundColor Blue
try {
    $railwayStatus = railway status 2>&1
    Write-Host "‚úÖ Railway CLI connect√©" -ForegroundColor Green
    Write-Host "$railwayStatus" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Railway CLI non disponible" -ForegroundColor Red
}

Write-Host "`nüöÄ PROCHAINES √âTAPES :" -ForegroundColor Yellow
Write-Host "1. Si API non accessible : V√©rifier Railway deployment" -ForegroundColor White
Write-Host "2. Si API accessible : Proc√©der au d√©ploiement Vercel" -ForegroundColor White
Write-Host "3. Tester l'application compl√®te" -ForegroundColor White

Write-Host "`nüì± URLs utiles :" -ForegroundColor Cyan
Write-Host "- Railway Dashboard: https://railway.app" -ForegroundColor White
Write-Host "- API Base: $API_BASE" -ForegroundColor White
Write-Host "- Vercel Dashboard: https://vercel.com" -ForegroundColor White

Read-Host "`nAppuyez sur Entr√©e pour continuer..."
